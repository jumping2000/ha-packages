#################################################################
#                                                               #
#                           Dishwasher                          #
#                                                               #
#################################################################
## INFO ðŸ“¦
##  ðŸ˜… Gianpi [hassiohelp.eu]
##  ðŸ“… 01/08/2022
##  ðŸ“Œ Information provided power, voltage, current, PF, etc fcoming from plug Teckin SP22
##  ðŸ“‚ PATH IMAGE
## 
## With FSM (Finite State Machine) for Dishwasher control
##
## FSM https://github.com/muxa/esphome-state-machine
##
## PLUG TECKIN SP22
## https://templates.blakadder.com/teckin_SP22.html
## https://www.esphome-devices.com/devices/BlitzWolf-BW-SHP2-Power-Monitoring-Plug
## CALIBRAZIONE:
## https://investio.pro/review-of-blitzwolf-bw-shp2-wi-fi-outlet-with-energy-monitoring-esphome-firmware-for-home-assistant/
##
#################################################################
substitutions:
  device_name: "plug-lavastoviglie"
  sensor_name: "Plug Lavastoviglie"
  id_name: "plug_lavatrice"
  device_description: "Teckin SP22 Power Monitoring Plug"
  current_res: "0.00223" # Higher value gives lower watt readout
  voltage_div: "734.5" # Lower value gives lower voltage readout
  ############# SENSORI ###############
  standard_throttle: "60s" #for power, voltage, current sensor
  delta_power: "1"
  update_interval: "120s" ## for other sensor
  ########### LAVASTOVIGLIE ###########
  drying_time: "20min"
  standard_time: "1min"
  min_power_threshold: "1.4"
  max_power_threshold: "200"
  middle_power_threshold: "73"
  other_power_threshold: "7"
  #####################################
packages:
  device_base: !include common/device_base.yaml
esphome:
  name: ${device_name}
  comment: ${device_description}
esp8266:
  board: esp8285
##
wifi:
  manual_ip:
    static_ip: 192.168.1.52
    gateway: 192.168.1.1
    subnet: 255.255.255.0
##
time:
  - platform: homeassistant
    id: homeassistant_time
##### STATE MACHINE ####
external_components:
  - source:
      type: git
      url: https://github.com/muxa/esphome-state-machine
##
state_machine:
  - name: Lavastoviglie State Machine
    states:
      - "Idle"
      - "Prelavaggio"
      - "Lavaggio"
      - "Risciacquo"
      - "Asciugatura"
    inputs:
      - name: POWER_MEDIUM
        transitions:
          - Idle -> Prelavaggio
          - Lavaggio -> Risciacquo
      - name: POWER_HIGH
        transitions:
          - Prelavaggio -> Lavaggio
          - Risciacquo -> Lavaggio
      - name: POWER_LOW
        transitions:
          - Risciacquo -> Asciugatura
          - Lavaggio -> Asciugatura
      - name: DRYING
        transitions:
          - Asciugatura -> Idle
    diagram: mermaid
########################
# Text sensors with state
text_sensor:
  - platform: state_machine
    name: Dishwasher Status
    icon: mdi:stove
########################
sensor:
# Reports the Current, Voltage, and Power used by the plugged-in device
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO04
    cf1_pin: GPIO05
    change_mode_every: 8
    update_interval: 10s
    current:
      id: my_current
      name: ${sensor_name} Current
      icon: mdi:current-ac
      unit_of_measurement: A
      accuracy_decimals: 2
      filters:
        - or:
          - throttle: ${standard_throttle} #60s
          - delta: 0.1
    voltage:
      id: my_voltage
      name: ${sensor_name} Voltage
      icon: mdi:sine-wave
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        - or:
          - throttle: ${standard_throttle} #60s
          - delta: 3.0
        # - calibrate_linear:
        #     # Map 0.0 (from sensor) to 0.0 (true value)
        #     - 0.0 -> 0.0
        #     - 251.4 -> 241.5
    power:
      id: my_power
      name: ${sensor_name} Power
      icon: mdi:flash-outline
      unit_of_measurement: W
      filters:
        - calibrate_linear:
            # Map 0.0 (from sensor) to 0.0 (true value)
            - 0.0000 -> 0.5900 # Relay off no load
            - 0.0000 -> 1.300 # Relay on no load
            - 2350 -> 2250
        - lambda: if (x < 1.300) return 0; else return (x - 1.300);
        - or:
          - throttle: ${standard_throttle} #60s
          - delta: ${delta_power}
      on_value:  # on_value_range:
        - if:
            condition:
              for:
                time: ${drying_time} #20min
                condition:
                  sensor.in_range:
                    id: my_power
                    below: ${min_power_threshold}
            then:
              - state_machine.transition: DRYING
              - logger.log: "Transizione DRYING"
        - if:
            condition:
              for:
                time: ${standard_time} #1min
                condition:
                  sensor.in_range:
                    id: my_power
                    below: ${other_power_threshold} #7
                    above: 0.1
            then:
              - state_machine.transition: POWER_LOW
              - logger.log: "Transizione POWER_LOW"
        - if:
            condition:
              for:
                time: ${standard_time} #1min
                condition:
                  sensor.in_range:
                    id: my_power
                    above: ${min_power_threshold} #1.4
                    below: ${middle_power_threshold} #72
            then:
              - state_machine.transition: POWER_MEDIUM
              - logger.log: "Transizione POWER_MEDIUM"
        - if:
            condition:
              for:
                time: ${standard_time} #1min
                condition:
                  sensor.in_range:
                    id: my_power
                    above: ${max_power_threshold} #200
            then:
              - state_machine.transition: POWER_HIGH
              - logger.log: "Transizione POWER_HIGH"

    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}

# Reports the total Power so-far each day, resets at midnight, see https://esphome.io/components/sensor/total_daily_energy.html
  - platform: total_daily_energy
    name: ${sensor_name} Energy
    icon: mdi:circle-slice-3
    power_id: my_power
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
# Total Energy
  - platform: integration
    name: ${sensor_name} Total Energy
    sensor: my_power
    time_unit: h
    restore: true
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
##
  - platform: template
    name: ${sensor_name} PF
    lambda: |-
      if (id(my_current).state > 0) return id(my_power).state / (id(my_voltage).state * id(my_current).state);
      else return 0;
    update_interval: 10s
    state_class: measurement
    device_class: "power_factor"
    accuracy_decimals: 1
    unit_of_measurement: "%"
    icon: "mdi:angle-acute"
    filters:
      - or:
        - throttle: ${standard_throttle} #60s
        - delta: 1.0

  - platform: template
    name: "${sensor_name} Apparent Power"
    lambda: |-
      return id(my_voltage).state * id(my_current).state;
    update_interval: 10s
    state_class: "measurement"
    device_class: "apparent_power"
    accuracy_decimals: 1
    unit_of_measurement: "VA"
    icon: "mdi:speedometer"
    filters:
      - or:
        - throttle: ${standard_throttle} #60s
        - delta: ${delta_power}

  - platform: template
    name: "${sensor_name} Reactive Power"
    lambda: |-
      if (id(my_current).state > 0) return sqrt(abs(id(my_voltage).state * id(my_current).state * id(my_voltage).state * id(my_current).state - id(my_power).state * id(my_power).state));
      else return 0;
    update_interval: 10s
    state_class: "measurement"
    device_class: "reactive_power"
    accuracy_decimals: 1
    unit_of_measurement: "var"
    icon: "mdi:speedometer"
    filters:
      - or:
        - throttle: ${standard_throttle} #60s
        - delta: ${delta_power}
########
binary_sensor:
# Button on the front is pressed and then toggle relay
  - platform: gpio
    device_class: power
    pin:
      number: GPIO01
      mode: INPUT_PULLUP
      inverted: True
    name: ${sensor_name} Button # Name to make button visible in HA
    on_press:
      - switch.toggle: relay
########
switch:
# Relay itself
  - platform: gpio
    name: ${sensor_name}
    pin: GPIO14
    id: relay
    restore_mode: RESTORE_DEFAULT_OFF #Try to restore relay state after reboot/power-loss event.
    #RESTORE_DEFAULT_OFF (Default) - Attempt to restore state and default to OFF if not possible to restore. Uses flash write cycles.
    #RESTORE_DEFAULT_ON - Attempt to restore state and default to ON. Uses flash write cycles.
    #ALWAYS_OFF - Always initialize the pin as OFF on bootup. Does not use flash write cycles.
    #ALWAYS_ON - Always initialize the pin as ON on bootup. Does not use flash write cycles.
    on_turn_on: # Action when relay is turned on
      - script.execute: led_power_on
    on_turn_off: # Action when relay is turned off
      - script.execute: led_relay_off
########
output:
  # Output GPIOs for blue led
  - platform: esp8266_pwm
    id: ${id_name}_blue_output
    pin:
      number: GPIO03
      inverted: True
########
status_led:
  pin:
    number: GPIO13
    inverted: True
########
light:
  # RGB light
  - platform: monochromatic
    name: ${sensor_name} Light
    output: ${id_name}_blue_output
    id: ${id_name}_blue_led
########
# Blink the blue light if we aren't connected to WiFi. Could use https://esphome.io/components/status_led.html instead but then we couldn't use the blue light for other things as well.
# Only if not connected after 30s
interval:
  - interval: 2000ms
    then:
      - if:
          condition:
            for:
              time: 30s
              condition:
                not:
                  wifi.connected:
          then:
            - light.turn_on:
                id: ${id_name}_blue_led
                brightness: 100%
########
script:
  - id: led_relay_off # Normal operation when relay is off
    then:
      - light.turn_off:
          id: ${id_name}_blue_led
  - id: led_power_on # Normal operation when relay is on
    then:
      - light.turn_on:
          id: ${id_name}_blue_led
          brightness: 80%
